# config/packages/security.yaml
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User\UserLogin
                property: email

    firewalls:
        # Firewall pour la connexion JSON
        # Ce firewall est dédié à l'entrée des utilisateurs dans le système en générant un token JWT.
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall pour les API sécurisées avec JWT
        # Ce firewall protège l'accès aux ressources de l'API et vérifie que les requêtes contiennent un JWT valide dans leur en-tête Authorization.
        api:
            pattern: ^/api
            custom_authenticators: 
                - App\Security\JwtAuthenticator
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh
            


        # Firewall pour le développement (ne nécessite pas de sécurité)
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false


    # Hiérarchie des rôles
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # Access control pour les chemins spécifiques
    access_control:

        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS  }

         # Autoriser l'accès aux routes de réinitialisation de mot de passe sans authentification
        - { path: ^/api/security/sendPasswordLink, roles: PUBLIC_ACCESS }
        - { path: ^/api/security/reset-password, roles: PUBLIC_ACCESS }

         # autoriser le Cron Job à s'exécuter sans authentification
        - { path: ^/api/cron, roles: PUBLIC_ACCESS }
        
         # autoriser les admin a changer le role
        - { path: ^/api/user/updateUserRole, roles: ROLE_ADMIN }
       

        # autoriser le nouvel user à s'inscrire sans authentification
        #- { path: ^/api/user/register, roles: PUBLIC_ACCESS }

        # authentification obligatoire
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # Paramètres de hashage des mots de passe pour les tests
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Valeur la plus basse pour bcrypt
                time_cost: 3 # Valeur la plus basse pour argon
                memory_cost: 10 # Valeur la plus basse pour argon
